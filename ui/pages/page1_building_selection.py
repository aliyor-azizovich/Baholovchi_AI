# from PyQt5.QtWidgets import QWidget, QMessageBox, QGridLayout, QCheckBox, QPushButton, QLabel, QGroupBox


# class Page1BuildingSelection(QWidget):
#     def __init__(self, widget, parent=None, service=None):
#         super().__init__(parent)
#         self.widget = widget
#         self.parent = parent  # –≠—Ç–æ LiterFilterDialog
#         self.service = service

#         # –°–µ—Ç–∫–∞ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
#         groupbox = self.widget.findChild(QGroupBox, "groupBox_buildings")
#         self.layout_checkboxes = groupbox.findChild(QGridLayout, "gridLayout_for_checkboxes")


#         self.checkboxes = []
#         self.load_building_types()

#         # –ö–Ω–æ–ø–∫–∞ "–û–ö"
#         self.pushButton_ok = self.widget.findChild(QPushButton, "pushButton_ok")
#         self.pushButton_ok.clicked.connect(self.accept_data)
#         # –ö–Ω–æ–ø–∫–∞ "Cancel"
        

#         # –õ–µ–π–±–ª—ã
#         self.label_selected_building = self.findChild(QLabel, "label_selected_building")
        


#     def load_building_types(self):
#         """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —á–µ–∫–±–æ–∫—Å—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∑–¥–∞–Ω–∏–π"""
#         buildings = self.service.get_unique_buildings()
#         row, col, max_rows = 0, 0, 7
#         for building in buildings:
#             cb = QCheckBox(building)
#             self.layout_checkboxes.addWidget(cb, row, col)
#             cb.clicked.connect(self.single_selection)  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–∫–±–æ–∫—Å
#             self.checkboxes.append(cb)
#             row += 1
#             if row >= max_rows:
#                 row, col = 0, col + 1

#     def single_selection(self):
#         """–í—ã–±–æ—Ä —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —á–µ–∫–±–æ–∫—Å–∞"""
#         sender = self.sender()
#         for cb in self.checkboxes:
#             if cb != sender:
#                 cb.setChecked(False)

#     def accept_data(self):
#         """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
#         selected = [cb.text() for cb in self.checkboxes if cb.isChecked()]
#         if not selected:
#             QMessageBox.warning(self.widget, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–¥–∞–Ω–∏—è!")
#             return
#         building_type = selected[0]
      
#      # üî• –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ collect_data –¥–ª—è —Å–±–æ—Ä–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
#         collected_data = self.collect_data()
       
    
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å liter_data
#         self.parent.liter_data["page1"] = collected_data

#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –¥–∏–∞–ª–æ–≥
#         self.parent.selected_building_type = building_type

#         # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
#         self.parent.params_for_liter.setCurrentIndex(1)

#         # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Ä–æ–¥–∏—Ç–µ–ª—è)
#         self.parent.load_page2_data(building_type)


        
#     def collect_data(self):
#         """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–∏–ø –∑–¥–∞–Ω–∏—è)"""
#         selected = [cb.text() for cb in self.checkboxes if cb.isChecked()]
#         if not selected:
#             QMessageBox.warning(self.widget, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–¥–∞–Ω–∏—è!")
#             return {}

#         building_type = selected[0]
#         # building_id = self.service.get_building_id(building_type)  # –ï—Å–ª–∏ ID —Ç–æ–∂–µ –Ω—É–∂–µ–Ω

#         data = {
#             "building_type": building_type,
#             # "building_id": building_id  # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
#         }

#         return data
    

    
#     def load_data(self, data):
#         """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (Page1)"""
#         try:
#             building_type = data.get("building_type", "")
#             found = False

#             # –ò—â–µ–º —á–µ–∫–±–æ–∫—Å —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
#             for cb in self.checkboxes:
#                 if cb.text() == building_type:
#                     cb.setChecked(True)
#                     self.label_selected_building.setText(building_type)
#                     found = True
#                     break

#             if not found:
              
#                 return False

           
#             return True

#         except Exception as e:
          
#             return False


